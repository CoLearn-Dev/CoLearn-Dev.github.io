use std::collections::HashMap;
use tonic::{transport::Server, Request, Response, Status};

// These module names are auto-generated by tonic so there's nothing I can do to control the uppercase and lowercase
// This is because tonic's parser thinks the service name DDS is one single word in dds.proto
use dds::dds_server::{Dds, DdsServer};
use dds::{LoadStringReply, LoadStringRequest, StoreStringRequest, SuccessBool};

use std::sync::Mutex;

use once_cell::sync::OnceCell;

pub mod dds {
    tonic::include_proto!("dds");
}

static MAP: OnceCell<Mutex<HashMap<String, Vec<u8>>>> = OnceCell::new();

#[derive(Debug, Default)]
pub struct MyService {}

// Once again, this is "Dds" from the auto-generated code from tonic
#[tonic::async_trait]
impl Dds for MyService {
    async fn store_string(
        &self,
        request: Request<StoreStringRequest>,
    ) -> Result<Response<SuccessBool>, Status> {
        println!("Got a request: {:?}", request);
        let body: StoreStringRequest = request.into_inner();
        let key: String = body.key;
        let value: String = body.value;
        let value = value.into_bytes();

        let status = true;

        let m = MAP.get().unwrap();
        m.lock().unwrap().insert(key, value);
        let reply = SuccessBool {
            success: true.into(),
        };

        Ok(Response::new(reply))
    }

    async fn load_string(
        &self,
        request: Request<LoadStringRequest>,
    ) -> Result<Response<LoadStringReply>, Status> {
        println!("Got a request: {:?}", request);
        let body: LoadStringRequest = request.into_inner();
        let key: String = body.key;

        let status = true;

        let m = MAP.get().unwrap();
        let m = m.lock().unwrap().clone();
        let res = m.get(&key);
        let value = match res {
            None => return Err(Status::not_found("this key is not found on the server")),
            Some(bytes) => String::from_utf8(bytes.to_vec()).unwrap(),
        };
        let reply = LoadStringReply {
            value: value.into(),
        };

        Ok(Response::new(reply))
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    MAP.set(Mutex::new(HashMap::<String, Vec<u8>>::new()))
        .unwrap();

    let addr = "[::1]:50051".parse()?;
    let service = MyService::default();

    Server::builder()
        .add_service(DdsServer::new(service))
        .serve(addr)
        .await?;

    Ok(())
}
